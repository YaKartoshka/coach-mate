// npm start demo1 - start app

var args = process.argv.slice(2);
run_mode = args[0];
require("../config/" + run_mode); //global config -> conf

const firebase = require('../libs/firebase_db');
// require('../libs/telegram')
require("../libs/translate")
const fdb = firebase.fdb;
const fauth = firebase.fauth;
const express = require('express');
var app = require("../app");
var http = require("http");
var server = http.createServer(app);
let port = conf.port || process.env.PORT;

server.listen(conf.port);
server.on("error", onError);
console.log(`App is listening at host http://localhost:${conf.port}`);


const checkPassStatuses = async (req, res) => {
  try {
    var today = new Date();
    const formattedToday = new Date(today.getFullYear(), today.getMonth(), today.getDate()); // Remove time part
    console.log(formattedToday);

    // check status == 1 & days < 5 days ? days > 4 -> status = 2
    // if days <= 0 && status==2 -> status = 0

    //status = 0 не оплачено
    //status = 1 оплачено
    //status = 2 ожидает оплаты в течении 5 дней

    const panels = await fdb.collection('panels').get();

    panels.forEach(async (panelDoc) => {
      const users = await fdb.collection('panels').doc(panelDoc.id).collection('users').where('role', '==', 'student').get();

      users.forEach(async (userDoc) => {
        const userData = userDoc.data();
        const passStartDate = new Date(userData.pass_start_date);
        const diffTime = formattedToday - passStartDate;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        console.log(`User ID: ${userDoc.id}`);
        console.log(`Pass Start Date: ${passStartDate}`);
        console.log(`Today's Date: ${formattedToday}`);
        console.log(`Difference in Days: ${diffDays}`);
        console.log(`Current Pass Status: ${userData.pass_status}`);

        let newPassStatus;
        if (userData.pass_status == 1 && diffDays <= 5 && diffDays > 0) {
          newPassStatus = 2; // Waiting for payment within 5 days
        } else if (diffDays <= 0 && userData.pass_status == 2) {
          newPassStatus = 0; // Pass expired, not paid
        } else {
          // No change in pass_status
          newPassStatus = userData.pass_status;
        }

        // Update pass_status in Firestore
        // Only update if newPassStatus is defined and different from current status
        if (newPassStatus !== undefined && newPassStatus !== userData.pass_status) {
          await fdb.collection('panels').doc(panelDoc.id).collection('users').doc(userDoc.id).update({
            pass_status: newPassStatus
          });
          console.log(`Updated pass status for user ${userDoc.data().first_name} in panel ${panelDoc.id} to ${newPassStatus}`);
        }
      });
    });
  } catch (error) {
    console.error('Error while checking pass statuses:', error);
  }
};

setInterval(checkPassStatuses, 24 * 60 * 60 * 1000) //do not forget to change on 86400000ms (every day)

checkPassStatuses();

// in Admin set status always 2 -Ю users.js





generateSK = () => {
  var sk = crypto.randomBytes(20).toString("hex");
  return sk;
}

generatePassword = () => {
  var randomstring = Math.random().toString(36).slice(-6);
  return randomstring;
}

getCookie = (name) => {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

getCurrentDate = () => {
  var currentDate = new Date();

  var day = currentDate.getDate().toString().padStart(2, '0');
  var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  var year = currentDate.getFullYear();

  var hours = currentDate.getHours().toString().padStart(2, '0');
  var minutes = currentDate.getMinutes().toString().padStart(2, '0');

  var date = `${day}.${month}.${year} ${hours}:${minutes}`;
  return date;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      //process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      //process.exit(1);
      break;
    default:
      throw error;
  }
}

getAdminInfo = async function (panel_id, user_id, callback) {
  const user = await fdb.collection('panels').doc(panel_id).collection('users').doc(user_id).get();

  if (user.data().role != 'admin') {
    return callback({ 'r': 0 })
  }

  return callback({
    'id': user.data().user_id,
    'first_name': user.data().first_name,
    'last_name': user.data().last_name,
    'email': user.data().email,
    'email': user.data().email,
    'r': 1,
  });
}