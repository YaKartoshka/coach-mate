// npm start demo1 - start app

var args = process.argv.slice(2);
run_mode = args[0];
require("../config/" + run_mode); //global config -> conf

const firebase = require('../libs/firebase_db');
const fdb = firebase.fdb;
const fauth = firebase.fauth
var app = require("../app");
var http = require("http");
var server = http.createServer(app);
let port = conf.port || process.env.PORT;

server.listen(conf.port);
server.on("error", onError);
console.log(`App is listening at host http://localhost:${conf.port}`);








generateSK = () => {
  var sk = crypto.randomBytes(20).toString("hex");
  return sk;
}

generatePassword = () => {
  var randomstring = Math.random().toString(36).slice(-6);
  return randomstring;
}

getCookie = (name) => {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

getCurrentDate = () => {
  var currentDate = new Date();

  var day = currentDate.getDate().toString().padStart(2, '0');
  var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  var year = currentDate.getFullYear();

  var hours = currentDate.getHours().toString().padStart(2, '0');
  var minutes = currentDate.getMinutes().toString().padStart(2, '0');

  var date = `${day}.${month}.${year} ${hours}:${minutes}`;
  return date;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      //process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      //process.exit(1);
      break;
    default:
      throw error;
  }
}

getAdminInfo = async function (panel_id, user_id, callback) {
  const user = await fdb.collection('panels').doc(panel_id).collection('users').doc(user_id).get();

  if (user.data().role != 'admin') {
    return callback({ 'r': 0 })
  }

  return callback({
    'id': user.data().user_id,
    'first_name': user.data().first_name,
    'last_name': user.data().last_name,
    'email': user.data().email,
    'email': user.data().email,
    'r': 1,
  });
}