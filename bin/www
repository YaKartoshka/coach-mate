// npm start demo1 - start app

var args = process.argv.slice(2);
config = args[0];
run_mode = args[1];
require("../config/" + config); //global config -> conf

const firebase = require('../libs/firebase_db');
require('../libs/telegram')
require("../libs/translate")
const fdb = firebase.fdb;
const fauth = firebase.fauth;
const express = require('express');
const { format, addMonths, differenceInCalendarDays } = require('date-fns');
var app = require("../app");
var http = require("http");
var https = require('https');
var fs = require("fs");
let port = conf.port || process.env.PORT;

run_mode = args[1];



if(run_mode == 2){

  var server = http.createServer(app);
  var options = {
    key: fs.readFileSync('/etc/letsencrypt/live/coachmate.kz/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/coachmate.kz/fullchain.pem')
  }

  https.createServer(options, app).listen(443, () => {
    console.log('App listening on port 443!');
  });

  app.listen(80, (req,res)=>{
  console.log('local started')
  });
  console.log(`App is listening at host http://localhost:${conf.port}`);

} else {
  var server = http.createServer(app);
  server.listen(conf.port);
  server.on("error", onError);
  console.log(`App is listening at host http://localhost:${conf.port}`);

}
// check status == 1 & days < 5 days ? days > 4 -> status = 2
// if days <= 0 && status==2 -> status = 0

//status = 0 не оплачено
//status = 1 оплачено
//status = 2 ожидает оплаты в течении 5 дней


const checkPassStatuses = async (req, res) => {
  try {
    const today = new Date();
    const formattedToday = new Date(today.getFullYear(), today.getMonth(), today.getDate()); // Убираем часть времени

    const panels = await fdb.collection('panels').get();

    panels.forEach(async (panelDoc) => {
      const users = await fdb.collection('panels').doc(panelDoc.id).collection('users').where('role', '==', 'student').get();

      users.forEach(async (userDoc) => {
        const userData = userDoc.data();
        const passStartDate = new Date(userData.pass_start_date);

        // Находим дату окончания абонемента (добавляем 1 месяц к дате начала)
        const passEndDate = addMonths(passStartDate, 1);

        // Разница между сегодняшним днем и датой окончания абонемента
        const diffDays = differenceInCalendarDays(passEndDate, formattedToday);

        let newPassStatus;
        if (userData.pass_status == 1 && diffDays <= 5 && diffDays > 4) {
          newPassStatus = 2; // Ожидает оплаты в течение 5 дней
          if(userData.telegram_chat_id) sendTelegramNotification(userData.telegram_chat_id, 'Срок вашего абонемента истечет в течении 5дней.', 'Уведомление об оплате')
        } else if (diffDays <= 0 && userData.pass_status == 2) {
          newPassStatus = 0; // Абонемент истек, не оплачен
        } else {
          // Нет изменений в статусе
          newPassStatus = userData.pass_status;
        }

        // Обновляем статус абонемента в Firestore
        if (newPassStatus !== undefined && newPassStatus !== userData.pass_status) {
          await fdb.collection('panels').doc(panelDoc.id).collection('users').doc(userDoc.id).update({
            pass_status: newPassStatus
          });
          console.log(`Updated pass status for user ${userDoc.data().first_name} in panel ${panelDoc.id} to ${newPassStatus}`);
        }
      });
    });
  } catch (error) {
    console.error('Error while checking pass statuses:', error);
  }
};

setInterval(checkPassStatuses, 24 * 60 * 60 * 1000); // Проверка каждый день (86400000ms)

checkPassStatuses();


// in Admin set status always 2 -Ю users.js





generateSK = () => {
  var sk = crypto.randomBytes(20).toString("hex");
  return sk;
}

generatePassword = () => {
  var randomstring = Math.random().toString(36).slice(-6);
  return randomstring;
}

getCookie = (name) => {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

getCurrentDate = () => {
  var currentDate = new Date();

  var day = currentDate.getDate().toString().padStart(2, '0');
  var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
  var year = currentDate.getFullYear();

  var hours = currentDate.getHours().toString().padStart(2, '0');
  var minutes = currentDate.getMinutes().toString().padStart(2, '0');

  var date = `${day}.${month}.${year} ${hours}:${minutes}`;
  return date;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      //process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      //process.exit(1);
      break;
    default:
      throw error;
  }
}

getAdminInfo = async function (panel_id, user_id, callback) {
  const user = await fdb.collection('panels').doc(panel_id).collection('users').doc(user_id).get();

  if (user.data().role != 'admin') {
    return callback({ 'r': 0 })
  }

  return callback({
    'id': user.data().user_id,
    'first_name': user.data().first_name,
    'last_name': user.data().last_name,
    'email': user.data().email,
    'email': user.data().email,
    'r': 1,
  });
}

encode = function (str, shift) {
  return str.split('').map(char => {
    if (char.match(/[a-z]/i)) {
      const code = char.charCodeAt(0);
      const isUpperCase = code >= 65 && code <= 90;
      const base = isUpperCase ? 65 : 97;
      return String.fromCharCode(((code - base + shift) % 26) + base);
    }
    return char;
  }).join('');
}

decode = function (str, shift) {
  return encode(str, 26 - shift);
}